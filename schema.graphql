type Gateway @entity {
  id: ID!
  tokens: [String!]
  txHash: String!
  timestamp: BigInt!
  blockNumber: BigInt!
}

type DefaultGateway @entity {
  id: ID!
  gateway: String!
  txHash: String!
  timestamp: BigInt!
  blockNumber: BigInt!
}

type TxToL1 @entity {
  id: ID!
  gateway: String!
  from: String!
  to: String!
  seqNum: BigInt!
  data: String!
  txHash: String!
  timestamp: BigInt!
  blockNumber: BigInt!
}

type TxToL2 @entity {
  id: ID!
  gateway: String!
  from: String!
  to: String!
  seqNum: BigInt!
  data: String!
  txHash: String!
  timestamp: BigInt!
  blockNumber: BigInt!
}

type InboundTransferFinalized @entity {
  id: ID!
  gateway: String!
  token: String!
  from: String!
  to: String!
  transferId: BigInt!
  amount: BigInt!
  data: String!
  txHash: String!
  timestamp: BigInt!
  blockNumber: BigInt!
}

type OutboundTransferInitiated @entity {
  id: ID!
  gateway: String!
  token: String!
  from: String!
  to: String!
  transferId: BigInt!
  amount: BigInt!
  data: String!
  txHash: String!
  timestamp: BigInt!
  blockNumber: BigInt!
}

type L2ToL1Transaction @entity {
  id: ID!
  caller: String!
  destination: String!
  uniqueId: BigInt!
  batchNumber: BigInt!
  indexInBatch: BigInt!
  arbBlockNum: BigInt!
  ethBlockNum: BigInt!
  timestamp: BigInt!
  callvalue: BigInt!
  data: String!
}